package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/M1RCLE/comments/graph/generated"
	"github.com/M1RCLE/comments/graph/model"
	"github.com/M1RCLE/comments/src/entity"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, post model.PostInput) (*entity.Post, error) {
	return r.PostService.CreatePost(ctx, entity.Post{
		Body:            post.Body,
		UserId:          post.UserID,
		CommentsAllowed: post.CommentsAllowed,
	})
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, comment model.CommentInput) (*entity.Comment, error) {
	if len(comment.Body) >= 2000 {
		return nil, &entity.CommentError{Message: "Comment body is too large"}
	}
	return r.CommentService.CreateComment(ctx, entity.Comment{
		Body:   comment.Body,
		UserId: comment.UserID,
		PostId: comment.PostID,
	})
}

// CreateSubComment is the resolver for the createSubComment field.
func (r *mutationResolver) CreateSubComment(ctx context.Context, comment model.SubCommentInput) (*entity.Comment, error) {
	if len(comment.Body) >= 2000 {
		return nil, &entity.CommentError{Message: "Comment body is too large"}
	}
	com, err := r.CommentService.GetCommentById(ctx, comment.ParentID)
	if err != nil {
		return nil, err
	}
	return r.CommentService.CreateSubComment(ctx, entity.Comment{
		Body:     comment.Body,
		UserId:   comment.UserID,
		PostId:   com.PostId,
		ParentId: &comment.ParentID,
	})
}

// Posts is the resolver for the Posts field.
func (r *queryResolver) Posts(ctx context.Context, limit *int) ([]*entity.Post, error) {
	return r.PostService.GetPosts(ctx, limit)
}

// Post is the resolver for the Post field.
func (r *queryResolver) Post(ctx context.Context, postID int) (*entity.Post, error) {
	return r.PostService.GetPostById(ctx, postID)
}

// Comments is the resolver for the Comments field.
func (r *queryResolver) Comments(ctx context.Context, limit *int) ([]*entity.Comment, error) {
	return r.CommentService.GetComments(ctx, limit)
}

// Comment is the resolver for the Comment field.
func (r *queryResolver) Comment(ctx context.Context, commentID int) (*entity.Comment, error) {
	return r.CommentService.GetCommentById(ctx, commentID)
}

// RegisterComment is the resolver for the registerComment field.
func (r *subscriptionResolver) RegisterComment(ctx context.Context, userID int, postID int) (<-chan *entity.Comment, error) {
	return r.SubscriptionService.RegisterSubscription(ctx, userID, postID)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
