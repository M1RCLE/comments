# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/schemas/*.graphqls

# Where should the generated server code go?
exec:
  package: generated

  # Only for single-file layout:
  filename: graph/generated/generated.go

  # Only for follow-schema layout:
  # dir: graph
  # filename_template: "{name}.generated.go"

  # Optional: Maximum number of goroutines in concurrency to use per child resolvers(default: unlimited)
  # worker_limit: 1000

# Uncomment to enable federation
# federation:
#   filename: graph/federation.go
#   package: graph
#   version: 2
#   options:
#     computed_requires: true

# Where should any generated models go?
model:
  filename: graph/model/models_gen.go
  package: model

  # Optional: Pass in a path to a new gotpl template to use for generating the models
  # model_template: [your/path/model.gotpl]

# Where should the resolver implementations go?
resolver:
  package: graph
  layout: follow-schema # Only other option is "single-file."

  # Only for single-file layout:
  # filename: graph/resolver.go

  # Only for follow-schema layout:
  dir: graph
  filename_template: "{name}.resolvers.go"

autobind:
 - "github.com/M1RCLE/comments/src/entity"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  Time:
    model:
      - github.com/99designs/gqlgen/graphql.Time
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.Int
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
  